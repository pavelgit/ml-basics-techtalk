{"version":3,"file":"static/webpack/static\\development\\pages\\main.js.c595377b69ab1558c53c.hot-update.js","sources":["webpack:///./pages/main.js","webpack:///./source/basic-perceptron-model.js","webpack:///./source/data-provider.js"],"sourcesContent":["import React from 'react';\r\nimport { irisSetosaPlotData, irisVersicolorPlotData } from '../source/data-provider';\r\nimport basicPerceptronModel from '../source/basic-perceptron-model';\r\nimport createPlotlyComponent from 'react-plotly.js/factory'\r\nimport FloatSlider from './../source/float-slider';\r\n\r\nexport default class extends React.Component {\r\n\r\n  state = {\r\n    isClient: false\r\n  };\r\n\r\n  plotLayout = {\r\n    autosize: false,\r\n    width: 800,\r\n    height: 800,\r\n    xaxis: {\r\n      range: [0, 10]\r\n    },\r\n    yaxis: {\r\n      range: [0, 10]\r\n    },\r\n    shapes: []\r\n  };\r\n\r\n  getClassificationLineShape() {\r\n    const x0 = -10;\r\n    const y0 = basicPerceptronModel.getClassificationLineY(x0);\r\n    const x1 = +10;\r\n    const y1 = basicPerceptronModel.getClassificationLineY(x1);\r\n    return {\r\n      type: 'line',\r\n      x0, y0, x1, y1\r\n    };\r\n  }\r\n\r\n  generateModelEvaluationData() {\r\n    const points = [];\r\n    for (let y = 0; y < 10; y++) {\r\n      for (let x = 0; x < 10; x++) {\r\n        points.push({ x:x, y:y, z: basicPerceptronModel.evaluate(x, y) });\r\n      }\r\n    }\r\n    return {\r\n      x: points.map(p => p.x),\r\n      y: points.map(p => p.y),\r\n      z: points.map(p => p.z),\r\n      type: 'contour',\r\n      showscale: false,\r\n      contours: {\r\n        coloring: 'heatmap'\r\n      }\r\n    }\r\n  };\r\n\r\n  redrawClassificationLine() {\r\n    this.plotLayout.shapes[0] = this.getClassificationLineShape();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isClient: true });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isClient) {\r\n      return null;\r\n    }\r\n    const Plot = createPlotlyComponent(Plotly);\r\n    return (\r\n      <div>\r\n        <Plot\r\n          data={[irisSetosaPlotData, irisVersicolorPlotData]}\r\n          layout={this.plotLayout}\r\n        />\r\n        <FloatSlider\r\n          rangeLimit={10}\r\n          value={basicPerceptronModel.k}\r\n          onChange={value => { basicPerceptronModel.k = value; this.redrawClassificationLine(); }}\r\n        />\r\n        <div>K={basicPerceptronModel.k}</div>\r\n\r\n        <FloatSlider\r\n          rangeLimit={10}\r\n          value={basicPerceptronModel.b}\r\n          onChange={value => { basicPerceptronModel.b = value; this.redrawClassificationLine(); }}\r\n        />\r\n        <div>b={basicPerceptronModel.b}</div>\r\n\r\n        <div>Loss={basicPerceptronModel.evaluateLoss()}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}","import { trainingExamples } from './data-provider';\r\n\r\nexport default new class BasicPerceptronModel {\r\n\r\n  constructor() {\r\n    this.k = 0;\r\n    this.b = 0;\r\n  }\r\n\r\n  evaluateActivation(v) {\r\n    return 1 / (1 + Math.exp(-v));\r\n  }\r\n\r\n  getClassificationLineY(x) {\r\n    return this.k * x + this.b;\r\n  }\r\n\r\n  evaluate(x, y) {\r\n    return this.evaluateActivation(this.getClassificationLineY(x) - y);\r\n  }\r\n\r\n  evaluateCost(x, y, category) {\r\n    return Math.pow(this.evaluate(x, y) - category, 2);\r\n  }\r\n\r\n  predict(x, y) {\r\n    return Math.sign(this.evaluate(x, y));\r\n  }\r\n\r\n  evaluateLoss() {\r\n    return trainingExamples.reduce((acc, v) => acc + this.evaluateCost(v.x, v.y, v.category), 0)\r\n  }\r\n\r\n}","const iris2 = require('./iris2');\r\n\r\nconst irisSetosaPlotData = {\r\n  x: iris2.filter(v => v.species === 'Iris-setosa').map(v => v.petal_length),\r\n  y: iris2.filter(v => v.species === 'Iris-setosa').map(v => v.petal_width),\r\n  name: 'Iris-setosa',\r\n  mode: 'markers',\r\n  type: 'scatter'\r\n};\r\n\r\nconst irisVersicolorPlotData = {\r\n  x: iris2.filter(v => v.species === 'Iris-versicolor').map(v => v.petal_length),\r\n  y: iris2.filter(v => v.species === 'Iris-versicolor').map(v => v.petal_width),\r\n  name: 'Iris-versicolor',\r\n  mode: 'markers',\r\n  type: 'scatter'\r\n};\r\n\r\nconst trainingExamples = iris2.map(v => (\r\n  {\r\n    x: v.petal_length,\r\n    y: v.petal_width,\r\n    category: v.species === 'Iris-setosa' ? 1 : 0\r\n  }\r\n));\r\n\r\nexport { irisSetosaPlotData, irisVersicolorPlotData, trainingExamples };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAVA;AACA;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AANA;AAUA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAtFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAQA;AACA;AATA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAoBA;AACA;AArBA;AAAA;AAAA;AAwBA;AACA;AAzBA;AAAA;AAAA;AA2BA;AACA;AAAA;AAAA;AAAA;AACA;AA7BA;AACA;AADA;AAAA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAEA;AACA;AACA;AAHA;AADA;;;;;;;;A","sourceRoot":""}